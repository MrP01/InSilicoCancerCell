---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Create your own Model">
  <main>
    <h1>Ion-Channel <span class="text-gradient">Editor</span></h1>
    <p>
      Create your own Ion-Channel Model with this tool capable of a full electrophysiological simulation.<br />
      To see these models in action, take a look at the full A549 cancer cell model <a href="/">here</a>!
    </p>
    <div class="outer-container">
      <div id="graph-container"></div>
      <div class="fun-state-editor">
        <input type="text" name="state_name" placeholder="State Name" />
      </div>
    </div>
  </main>
</Layout>

<script>
  import * as d3 from "d3";

  // Specify the dimensions of the chart.
  const width = 900;
  const height = 600;

  // Specify the color scale.
  const color = d3.scaleOrdinal(d3.schemeCategory10);

  // The force simulation mutates links and nodes, so create a copy
  // so that re-evaluating this cell produces the same result.
  const nodes = [
    { id: 0, name: "State A" },
    { id: 1, name: "State B" },
    { id: 2, name: "State C" },
    { id: 3, name: "State D" },
  ];
  const links = [
    { source: 0, target: 1, value: 0.3 },
    { source: 1, target: 1, value: 0.3 },
    { source: 2, target: 1, value: 0.3 },
    { source: 2, target: 3, value: 0.3 },
    { source: 2, target: 0, value: 0.3 },
  ];

  // Create a simulation with several forces.
  const simulation = d3
    .forceSimulation(nodes)
    .force(
      "link",
      d3
        .forceLink(links)
        .id((d) => d.id)
        .distance(() => 120)
    )
    .force("charge", d3.forceManyBody().strength(-900).distanceMin(200))
    .force("center", d3.forceCenter(width / 2, height / 2))
    .on("tick", ticked);

  // Create the SVG container.
  const svg = d3
    .create("svg")
    .attr("width", width)
    .attr("height", height)
    .attr("viewBox", [0, 0, width, height])
    .attr("style", "max-width: 100%; height: auto;");

  var link = svg
    .append("g")
    .attr("class", "links")
    .selectAll("line")
    .data(links)
    .enter()
    .append("line")
    .attr("stroke-width", function (d) {
      return Math.sqrt(d.value) * 20;
    });

  var node = svg
    .selectAll(".node")
    .data(nodes)
    .enter()
    .append("g")
    .attr("class", "node")
    .call(d3.drag().on("start", dragstarted).on("drag", dragged).on("end", dragended));

  node
    .append("circle")
    .attr("r", 23)
    .attr("stroke", "white")
    .attr("stroke-width", 3)
    .attr("fill", function (d) {
      return color(d.group);
    });

  node
    .append("text")
    .attr("dx", -4)
    .attr("dy", 7)
    .text(function (d) {
      return d.id;
    });

  simulation.nodes(nodes).on("tick", ticked);
  simulation.force("link").links(links);

  function ticked() {
    link
      .attr("x1", (d) => d.source.x)
      .attr("y1", (d) => d.source.y)
      .attr("x2", (d) => d.target.x)
      .attr("y2", (d) => d.target.y);

    node.attr("transform", function (d) {
      return "translate(" + d.x + "," + d.y + ")";
    });
  }

  // Reheat the simulation when drag starts, and fix the subject position.
  function dragstarted(event) {
    if (!event.active) simulation.alphaTarget(0.3).restart();
    event.subject.fx = event.subject.x;
    event.subject.fy = event.subject.y;
  }

  // Update the subject (dragged node) position during drag.
  function dragged(event) {
    event.subject.fx = event.x;
    event.subject.fy = event.y;
  }

  // Restore the target alpha so the simulation cools after dragging ends.
  // Unfix the subject position now that it’s no longer being dragged.
  function dragended(event) {
    if (!event.active) simulation.alphaTarget(0);
    event.subject.fx = null;
    event.subject.fy = null;
  }

  // When this cell is re-run, stop the previous simulation. (This doesn’t
  // really matter since the target alpha is zero and the simulation will
  // stop naturally, but it’s a good practice.)
  // invalidation.then(() => simulation.stop());

  document.getElementById("graph-container")?.appendChild(svg.node());
</script>

<style is:global>
  svg line {
    cursor: pointer;
    stroke: #999;
    stroke-opacity: 0.8;
  }
  svg circle {
    cursor: pointer;
  }
  svg text {
    cursor: pointer;
    fill: white;
  }
</style>
