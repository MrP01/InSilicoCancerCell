---
import Figure from "./Figure.astro";
---

<div class="outer-container">
  <div class="container protocol-selector">
    <button class="data-selection selected" data-protocol="activation">
      <Figure plot="protocol" args={{ protocol: "activation" }} />
      Activation
    </button>
    <button class="data-selection" data-protocol="deactivation">
      <Figure plot="protocol" args={{ protocol: "deactivation" }} />
      Deactivation
    </button>
    <button class="data-selection" data-protocol="ramp">
      <Figure plot="protocol" args={{ protocol: "ramp" }} />
      Ramp
    </button>
  </div>

  <div class="container phase-selector">
    <button class="data-selection selected" data-phase="g0"><div class="text">G0</div></button>
    <div class="phase-arrows"></div>
    <button class="data-selection" data-phase="g1"><div class="text">G1</div></button>
  </div>
</div>

<script>
  // @ts-nocheck
  import { selector } from "../store";

  function startProgress() {
    document.querySelector("main").style.opacity = "0.5";
    document.getElementById("progress-meter").style.display = "block";
  }
  startProgress(); // once at the start

  function endProgress() {
    document.querySelector("main").style.opacity = "1.0";
    document.getElementById("progress-meter").style.display = "none";
  }
  setTimeout(endProgress, 800);

  document.querySelectorAll(".protocol-selector .data-selection").forEach((button) => {
    button.addEventListener("click", (ev) => {
      button.parentElement?.querySelectorAll(".data-selection").forEach((other) => other.classList.remove("selected"));
      button.classList.add("selected");
      let protocol = button.attributes.getNamedItem("data-protocol")?.value || "hmm";
      startProgress();
      setTimeout(() => {
        selector.set({ protocol, phase: selector.get().phase });
        endProgress();
      }, 20);
    });
  });
  const phaseSelect = document.querySelector(".phase-selector");
  phaseSelect?.addEventListener("click", (ev) => {
    phaseSelect.classList.toggle("g1");
    phaseSelect.querySelectorAll(".data-selection").forEach((other) => other.classList.toggle("selected"));
    let phase = phaseSelect.classList.contains("g1") ? "g1" : "g0";
    startProgress();
    setTimeout(() => {
      selector.set({ protocol: selector.get().protocol, phase });
      endProgress();
    }, 20);
  });
</script>

<style lang="scss">
  .outer-container {
    display: flex;
    width: 100%;
    margin: 0 auto;
    justify-content: left;
    flex-wrap: wrap;
    gap: 55px;
  }
  .container {
    display: flex;
    justify-content: right;
    gap: 10px;
    position: relative;
    margin: 20px 0;
    height: 100%;
  }
  .data-selection {
    margin: 5px 16px;
    padding: 12px;
    background-color: black;
    border: 1px solid white;
    border-radius: 25px;
    color: white;
    cursor: pointer;
    font-size: 17px;
    transition: transform 0.2s;
    &:hover {
      transform: scale(1.2);
      // box-shadow: 0 0 0 4px rgb(var(--accent));
    }
    &.selected {
      box-shadow: 0 0 0 4px rgb(var(--accent));
    }
  }
  .protocol-selector {
    // width: calc(100% - 500px);
    .data-selection {
      margin: 0 4px;
    }
  }
  .phase-selector {
    width: 100px;
    height: 100px;
    cursor: pointer;
    margin-top: 52px;
    // margin-right: 40px;

    transition: transform 0.5s;
    transform: rotate(40deg);
    &.g1 {
      transform: rotate(220deg);
      .data-selection .text {
        transform: rotate(-220deg);
      }
    }

    &::before {
      position: absolute;
      left: -3px;
      content: "";
      width: 100%;
      height: 100%;
      border: 3px solid white;
      border-radius: 50%;
    }
    .data-selection {
      position: absolute;
      top: calc(50% - 24px);

      &.selected {
        transform: scale(1.35);
      }

      .text {
        transition: transform 0.5s;
        transform: rotate(-40deg);
      }
    }
    .data-selection:first-child {
      left: -40px;
    }
    .data-selection:last-child {
      right: -40px;
    }
    > div {
      text-align: center;
      height: 100%;
      padding-top: 14px;
    }
  }
  .phase-arrows {
    &::before,
    &::after {
      width: 100%;
      height: 100%;
      position: absolute;
      left: 0;
      font-size: 26px;
      font-weight: bold;
    }
    &::before {
      content: ">";
      top: -22px;
    }
    &::after {
      content: "<";
      top: calc(100% - 18px);
    }
  }

  @media (max-width: 760px) {
    .protocol-selector {
      margin-bottom: 0;
    }
    .phase-selector {
      margin-top: 0;
    }
  }

  @media (max-width: 800px) {
    .outer-container {
      justify-content: center;
    }
  }

  @media (min-width: 1250px) {
    .outer-container {
      position: fixed;
      left: 15px;
      top: 20px;
      flex-direction: column;
      width: 220px;
    }
    .container {
      flex-direction: column;
      margin: 0;
    }
    .data-selection {
      max-width: 180px;
    }
    .phase-selector {
      margin-top: 0;
      margin-left: 50px;
    }
  }
</style>
